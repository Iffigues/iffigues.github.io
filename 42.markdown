---
layout: default
title: School 42
---

# école 42

<div>
  <button onclick="showPDF('a')">certLvL22</button>
  <button onclick="showPDF('b')">certRNCP</button>
  <button onclick="showPDF('c')">cursus</button>
</div>

<div id="pdf-a" class="pdf-container">
  <canvas id="pdf-canvas"></canvas>
  <div>
    <button onclick="prevPage('a')">◀️ Précédent</button>
    <span id="page-num-a"></span> / <span id="page-count-a"></span>
    <button onclick="nextPage('a')">Suivant ▶️</button>
  </div>
</div>

<div id="pdf-b" class="pdf-container" style="display:none;">
  <canvas id="pdf-canvas1"></canvas>
  <div>
    <button onclick="prevPage('b')">◀️ Précédent</button>
    <span id="page-num-b"></span> / <span id="page-count-b"></span>
    <button onclick="nextPage('b')">Suivant ▶️</button>
  </div>
</div>

<div id="pdf-c" class="pdf-container" style="display:none;">
  <canvas id="pdf-canvas2"></canvas>
  <div>
    <button onclick="prevPage('c')">◀️ Précédent</button>
    <span id="page-num-c"></span> / <span id="page-count-c"></span>
    <button onclick="nextPage('c')">Suivant ▶️</button>
  </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
<script>
  const pdfFiles = {
    a: '{{ "/assets/data/42/pdf/certLvL22.pdf" | relative_url }}',
    b: '{{ "/assets/data/42/pdf/certRNCP.pdf" | relative_url }}',
    c: '{{ "/assets/data/42/pdf/cursus.pdf" | relative_url }}'
  };

  const pdfStates = {
    a: { pdfDoc: null, pageNum: 1, pageCount: 0, canvasId: 'pdf-canvas' },
    b: { pdfDoc: null, pageNum: 1, pageCount: 0, canvasId: 'pdf-canvas1' },
    c: { pdfDoc: null, pageNum: 1, pageCount: 0, canvasId: 'pdf-canvas2' }
  };

  function renderPage(key) {
    const state = pdfStates[key];
    state.pdfDoc.getPage(state.pageNum).then(page => {
      const scale = 1.5;
      const viewport = page.getViewport({ scale });
      const canvas = document.getElementById(state.canvasId);
      const ctx = canvas.getContext('2d');
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      const renderContext = {
        canvasContext: ctx,
        viewport: viewport
      };

      page.render(renderContext);

      document.getElementById(`page-num-${key}`).textContent = state.pageNum;
      document.getElementById(`page-count-${key}`).textContent = state.pageCount;
    });
  }

  function prevPage(key) {
    if (pdfStates[key].pageNum <= 1) return;
    pdfStates[key].pageNum--;
    renderPage(key);
  }

  function nextPage(key) {
    if (pdfStates[key].pageNum >= pdfStates[key].pageCount) return;
    pdfStates[key].pageNum++;
    renderPage(key);
  }

  // Chargement initial de chaque PDF
  for (const key in pdfFiles) {
    pdfjsLib.getDocument(pdfFiles[key]).promise.then(pdf => {
      pdfStates[key].pdfDoc = pdf;
      pdfStates[key].pageCount = pdf.numPages;
      renderPage(key);
    }).catch(err => {
      console.error(`Erreur de chargement du PDF (${key}):`, err);
    });
  }


  function showPDF(keyToShow) {
    ['a', 'b', 'c'].forEach(key => {
      document.getElementById(`pdf-${key}`).style.display = (key === keyToShow) ? 'block' : 'none';
    });

    // Si pas encore chargé, on charge
    const state = pdfStates[keyToShow];
    if (!state.pdfDoc) {
      pdfjsLib.getDocument(pdfFiles[keyToShow]).promise.then(pdf => {
        state.pdfDoc = pdf;
        state.pageCount = pdf.numPages;
        renderPage(keyToShow);
      }).catch(err => {
        console.error(`Erreur de chargement (${keyToShow}) :`, err);
      });
    } else {
      renderPage(keyToShow);
    }
  }

  // Affiche le premier PDF par défaut
  document.addEventListener('DOMContentLoaded', () => showPDF('a'));

</script>

